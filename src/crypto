#!/usr/bin/env python

import fire
from tinydb import TinyDB

from config import Config
from transaction import Transaction
from report import Report
from undo import Undo
from history import History

class Crypto(object):
    """ 
    This tool is for tracking your crypto transactions. It tracks the cost basis for any crypto and the capital gain
    """
    def __init__(self):
        config = Config()
        self.db = TinyDB(config.dbPath())
        self.history = History(self.db)


    def undo(self):
        """
        Undo the last operation
        """
        confirm = input("Are you sur you want to undo the last change? This will not be reversible [Y/N]: ").upper()

        if confirm == "Y":
            undo = Undo(self.db)
            undo.undo()

    def delete(self, table, docId):
        """
        Mostly used for developpement. It allows to delete a document

        :param table: Table to use to delete the document
        :param docId: Id of the document to delete
        """
        tbl = self.db.table(table)
        tbl.remove(doc_ids=[docId])

    def buy(self, amount, ticker, price, description=None):
        """
        Adds info to the cost basis for the specified crypto ticker 

        :param amount: How much of the crypto did you buy?
        :param ticker: Name of the crypto ticker
        :param price: Price you paid for the crypto (including fees)
        """
        ticker = ticker.upper()
        transaction = Transaction(self.db)
        transaction.buy(amount, ticker, price, description)

    def sell(self, amount, ticker, forPrice):
        """
        Tracks details of selling a crypto
        """
        ticker = ticker.upper()
        transaction = Transaction(self.db)
        transaction.sell(amount, ticker, forPrice)

    def exchange(self, fromAmount, fromTicker, toAmount, toTicker, toPrice):
        """
        Tracks the value of an exchange (crypto for crypto)

        :param fromAmount: Amount to remove from fromTicker
        :param fromTicker: crypto that is exchanged for toTicker
        :param toAmount: amount of toTicker you bought with fromTicker
        :param toTicker: the new crypto that was bought
        :param toPrice: the current price (in fiat currency) for the amount of crypto (toTicker) that was bought
        """
        fromTicker = fromTicker.upper()
        toTicker = toTicker.upper()

        transaction = Transaction(self.db)
        transaction.exchange(fromAmount, fromTicker, toAmount, toTicker, toPrice)

# Reports

    def amount(self, ticker):
        """
        Gets the amount of crypto for the ticker

        :param ticker: Crypto ticker
        """
        ticker = ticker.upper()
        
        report = Report(self.db)
        report.amount(ticker)

    def cost(self, ticker, details=False):
        """
        Returns the cost basis of the specified ticker
        """
        ticker = ticker.upper()

        report = Report(self.db)
        report.costBasis(ticker, details)

    def cg(self, details=False):
        """
        Returns info about your capital gain or loss
        """
        report = Report(self.db)
        report.capitalGain(details)

    def export(self, all=False, withIds=False):
        """
        Exports the history of transaction in the current database
        """
        report = Report(self.db)
        report.history(self.history, all, withIds)


if __name__ == '__main__':
    fire.Fire(Crypto)

