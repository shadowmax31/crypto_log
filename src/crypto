#!/usr/bin/env python

import fire
from tinydb import TinyDB
from tinydb_serialization import SerializationMiddleware
from serializer.date_time_serializer import DateTimeSerializer
from serializer.decimal_serializer import DecimalSerializer

from config import Config
from const import Tables
from transaction import Transaction
from report import Report
from undo import Undo
from history import History
from util import listTickers

class Crypto(object):
    """ 
    This tool is for tracking your crypto transactions. It tracks the cost basis for any crypto and the capital gain
    """
    def __init__(self):
        config = Config()

        serialization = SerializationMiddleware()
        serialization.register_serializer(DateTimeSerializer(), "TinyDateTime")
        serialization.register_serializer(DecimalSerializer(), "TinyDecimal")
        self.db = TinyDB(config.dbPath(), storage=serialization)

        self.history = History(self.db)

    def list(self):
        """
        Lists all the crypto ticker in the database
        """

        print(listTickers(self.db))


    def undo(self):
        """
        Undo the last operation
        """
        stop = False
        while True:
            confirm = input("Are you sur you want to undo the last change? This will not be reversible [y/N]: ").upper()

            if confirm == "":
                confirm = "N"
                
            if confirm == "Y":
                undo = Undo(self.db)
                undo.undo()
                print("Success!")

            if confirm in ["Y", "N"]:
                stop = True

            if stop:
                break


    def delete(self, table, docId):
        """
        Mostly used for developpement. It allows to delete a document

        :param table: Table to use to delete the document
        :param docId: Id of the document to delete
        """
        tbl = self.db.table(table)
        tbl.remove(doc_ids=[docId])

    def buy(self, date, amount, ticker, price, description):
        """
        Adds info to the cost basis for the specified crypto ticker

        :param date: The date and time at which the transaction was made
        :param amount: How much of the crypto did you buy?
        :param ticker: Name of the crypto ticker
        :param price: Price you paid for the crypto (including fees)
        """
        ticker = ticker.upper()
        transaction = Transaction(self.db)
        transaction.buy(date, amount, ticker, price, description)

    def sell(self, date, amount, ticker, forPrice, description):
        """
        Tracks details of selling a crypto

        :param date: The date and time at which the transaction was made
        """
        ticker = ticker.upper()
        transaction = Transaction(self.db)
        transaction.sell(date, amount, ticker, forPrice, description)

    def exchange(self, date, fromAmount, fromTicker, toAmount, toTicker, toPrice, description):
        """
        Tracks the value of an exchange (crypto for crypto)

        :param date: The date and time at which the transaction was made
        :param fromAmount: Amount to remove from fromTicker
        :param fromTicker: crypto that is exchanged for toTicker
        :param toAmount: amount of toTicker you bought with fromTicker
        :param toTicker: the new crypto that was bought
        :param toPrice: the current price (in fiat currency) for the amount of crypto (toTicker) that was bought
        """
        fromTicker = fromTicker.upper()
        toTicker = toTicker.upper()

        transaction = Transaction(self.db)
        transaction.exchange(date, fromAmount, fromTicker, toAmount, toTicker, toPrice, description)

# Reports

    def amount(self, ticker):
        """
        Gets the amount of crypto for the ticker

        :param ticker: Crypto ticker
        """
        ticker = ticker.upper()
        
        report = Report(self.db)
        report.amount(ticker)

    def cost(self, ticker, details=False):
        """
        Returns the cost basis of the specified ticker
        """
        ticker = ticker.upper()

        report = Report(self.db)
        report.costBasis(ticker, details)

    def cg(self, year=None, details=False):
        """
        Returns info about your capital gain or loss
        """
        report = Report(self.db)
        report.capitalGain(year, details)

    def export(self, all=False, withIds=False):
        """
        Exports the history of transaction in the current database
        """
        report = Report(self.db)
        report.history(self.history, all, withIds)


if __name__ == '__main__':
    fire.Fire(Crypto)

